<!doctype html>

<html lang="en">
    <head>
        <meta charset="utf-8">

        <title>Lokaverkefni</title>
        <link rel="stylesheet" href="/static/stylesheets/styles.css">
        <!-- Styles -->
        <link href="/static/stylesheets/theDocs.all.min.css" rel="stylesheet">
        <link href="/static/stylesheets/theDocs.css" rel="stylesheet">
        <link href="/static/stylesheets/custom.css" rel="stylesheet">
        <!-- Fonts -->
        <link href='http://fonts.googleapis.com/css?family=Raleway:100,300,400,500%7CLato:300,400' rel='stylesheet' type='text/css'>

        <meta name="description" content="Lokaverkefni fyrir Háskóla Íslands">
        <meta name="author" content="Þorvaldur Rúnarsson">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
        <script src="/static/scripts/jquery-3.1.1.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
        <script src="/static/scripts/main.js"></script>

    </head>

    <body data-spy="scroll" data-target=".sidebar" data-offset="200">

      <main class="container">
        <div class="row">

          <!-- Sidebar -->
          <aside class="col-sm-3 sidebar">
            <ul class="nav sidenav dropable sticky">
              <li><a href="#html-structure">Using SimpleSecure</a></li>
              <li>
                <a href="#title1">Introduction</a>
                <ul>
                  <li><a href="#subtitle1">About OAuth 2.0</a></li>
                  <li>
                    <a href="#subabout_me">client_credentials grant</a>
                  </li>
                  <li><a href="#subtitle3">Minimum viable product</a></li>
                  <li><a href="#subtitle4">Why not just use keys?</a></li>
                  <li>
                      <a href="#subtitle4">Design</a>
                      <ul>
                          <li><a href="#subtitle5-1">Overview</a></li>
                          <li><a href="#subtitle5-2">Flow</a></li>
                      </ul>
                  </li>
                </ul>
              </li>
              <li>
                  <a href="#title2">Report</a>
                  <ul>
                      <li><a href="#report-1">Exploring Swift</a></li>
                      <li><a href="#report-2">Exploring Kitura</a></li>
                      <li>
                          <a href="#report-3">Problems encountered</a>
                          <ul>
                              <li><a href="#report-3-1">Kitura's youth</a></li>
                              <li><a href="#report-3-2">Swift 3.0 update</a></li>
                          </ul>
                      </li>
                      <li>
                          <a href="#report-4">The Lesson</a>
                      </li>
                      <li>
                          <a href="#report-5">What's Next?</a>
                      </li>
                  </ul>
              </li>
              <li><a href="#about_me">About Me</a></li>
            </ul>

          </aside>
          <!-- END Sidebar -->


          <!-- Main content -->
          <article class="col-sm-9 main-content" role="main">
            <section>
                <h2>SimpleSecure</h2>
                <p class="lead">Using an API should be easy, and a simple authentication feature for your API should also be easy to implement. This isn't always the case so I tried to solve problem for Kitura developers with a project called SimpleSecure</p>
            </section>


            <section>
              <h2 id="html-structure">Using SimpleSecure</h2>
              <p>In your Package.swift file add SimpleSecure as a dependency</p>
              <pre class="line-numbers"><code class="language-swift">
                  let package = Package(
                      name: "YourProject",
                      targets: [
                        Target(name: "YourProject", dependencies: [])
                      ],
                      dependencies: [
                        .Package(url: "https://github.com/valdirunars/SimpleSecure", majorVersion: 1, minor: 0)
                      ],
                      exclude: ["Makefile", "Package-Builder"])

              </code></pre>
              <p>You can then use the SimpleSecure module to secure your API</p>
              <pre class="line-numbers"><code class="language-swift">
import SimpleSecure

let router: Router = Router()
SimpleOAuth2.sharedInstance.publicPaths = [
  "/",
  "/static/*",
]
SimpleOAuth2.sharedInstance.restrictedPaths = [
    "/adminJSON": "admin",
    "/userJSON": "user,admin"
]

SimpleOAuth2.sharedInstance.simplySecure(router: router, with: [
    SimpleCredential(clientId: "1234", clientSecret: "4321", scope: "admin"),
    SimpleCredential(clientId: "4321", clientSecret: "1234", scope: "user")
])
              </code></pre>

              <p>Send as simple HTTP POST request to the <code>localhost:8090/oauth2/authorize</code> with the following body</p>
              <pre class="line-numbers"><code class="language-json">
  {
  	"grant_type":"client_credentials",
  	"client_id":"1234",
  	"client_secret":"4321",
  	"scope": "admin"
  }
              </code></pre>
              <p>You will receive a token response similar to the one below:</p>
              <pre class="line-numbers"><code class="language-json">
  {
    "token_type": "Bearer",
    "access_token": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIxMjM0IiwiaWF0IjoxNDgzMzEyOTE5LjEwMDQyOSwiZXhwIjoxNDgzMzE0NzE5LjEwMDQ0Miwic2NvcGUiOiJhZG1pbiJ9.a8u-xUr8dui1hj-ri3eoe0qxPm2gVIHz6j8dIGgV2cLA7Y17s3zoGdu3C0R0BlZ_2pvv8cuEq5ULtMPt644WRw",
    "expires_in": "1800.0"
  }
              </code></pre>
              <p>
                  You can test the flow yourself in this web application as it already has routes secured token to access the API's resources, the route
                  <code>/adminJSON</code>
                  is secured by scope = admin and
                  <code>/userJSON</code>
                  is secured by scope = user
              </p>
              <p>
                The request should then return a response of the following format if the token used is valid
              </p>
              <pre class="line-numbers"><code class="language-json">
  {
    "messsage": "Secured by $scope credential"
  }
              </code></pre>
            </section>

            <section>
              <h2 id="title1">Introduction</h2>
              <h3 id="subtitle1">About OAuth 2.0</h3>
              <p>
                  One of the goals of OAuth 2.0 is to reduce the attack window to the end-user’s personal data. The security protocol addresses a big security issue in login systems, which is simply the fact that there are to many login systems.
              </p>

              <p>
                  When a user registers for an account, he usually provides a full name, email, username and password to the requesting service. According to
                  <a href="https://nakedsecurity.sophos.com/2013/04/23/users-same-password-most-websites/">this blog post</a>
                    by IT security giant Sophos, 55% of service users reuse most if not all their passwords. This creates a giant window for attackers especially if passwords are kept in each service’s database. Clearly this is a problem. It would mean that when users use multiple services at a time there is at least 55% chance of their password being sent multiple times over the wire.
              </p>

              <p>
                  OAuth 2.0 tries to address this problem by providing the user with a way to authenticate with a service without sending over his password.
              </p>

              <p>
                  If the user already has an account for a service acting as an OAuth 2.0 provider, he should be able to authenticate to essentially every service trusting that particular OAuth 2.0 provider. This can be accomplished by redirecting the user to logging into the OAuth 2.0 providing service. By logging into that service the user generates a reusable token signed by the OAuth 2.0 provider along with an added payload including further information about the token, e.g. the scope of authority for the token, expiration date, and non-sensItive info about the user.
              </p>

              <p>
                  With this solution the user will be able to authenticate using his credentials without actually sending his credentials over the wire in each request. The security of this implementation lies in the fact that the client sending the request will not have to know each user’s credentials but will still be able to know his scope of authority.
              </p>
              <p>
                  O’Auth 2.0 also specifies an improvement when connecting systems without user management. Like when connecting app/apps or device/devices to an API introducing O’Auth 2’ s client_credential grant type.
              </p>
              <h3 id="subabout_me">client_credentials grant</h3>
              <p>
                  Alex Bilbie is a famous blogger known for his blogs about the OAuth 1.0 and 2.0 protocols. In section 4.4 of his post,
                  <a href="https://alexbilbie.com/guide-to-oauth-2-grants/">A Guide To OAuth 2.0 Grants</a>,
                  the flow of a client_credentials request is well summarized.
              </p>
              <blockquote cite="https://alexbilbie.com/guide-to-oauth-2-grants/">
                  Client Credentials grant (section 4.4) <br/><br/>
          		The simplest of all of the OAuth 2.0 grants, this grant is
          		suitable for machine-to-machine authentication where a
          		specific user’s permission to access data is not required.<br/><br/>

          		The Flow<br/><br/>
          		The client sends a POST request with following body
          		parameters to the authorization server:<br/><br/>
          		- grant_type with the value client_credentials<br/>
          		- client_id with the client’s ID<br/>
          		- client_secret with the client’s secret<br/>
          		- scope with a space-delimited list of requested scope
          		  permissions<br/><br/>
          		The Authorization server will respond with a JSON object
          		containing the following properties:<br/><br/>
          		- token_type with the value Bearer<br/>
          		- expires_in with an integer representing the TTL of the access token<br/>
          		- access_token the access token itself<br/>
              </blockquote>
              <p>
                  To be able to follow this flow we have to have a proper token format and sign this token in a way that we’ll know not only that it was signed by us but also whether or not it has been tampered with. For this project I have decided to use one of the most common token formats, the JavaScript Web Token (JWT), as there exists a
                  <a href="https://github.com/kylef/JSONWebToken.swift">framework in Swift</a>
                  (The language we will be using) for validating and signing JWTs. For more information about JWTs see
                  <a href="https://www.jwt.io">www.jwt.io</a>.
              </p>

              <h3 id="subtitle3">Minimum viable product</h3>
              <p>
                  Our goal in this project is to create a module that helps developers to implement an OAuth 2.0 provider for securing their APIs.
              </p>
              <p>
                  The OAuth 2.0 protocol can be used for app/device authentication as well as user authentication using the “client_credentials” grant. Our main focus is to create an application which simplifies greatly the implementation of an OAuth 2.0 provider for the “client_credentials” grant.
              </p>

              <p>
                  There are a lot of OAuth 2.0 helpers supporting other grant types in Kitura, the framework we are targeting, so the focus in the minimum viable product should mainly be the “client_credential” grant, as support for that is non-existent.
              </p>

              <p>
                  So the minimum viable product is a module providing an easy to use interface for securing APIs with OAuth 2.0’s “client_credential” grant.
              </p>
              <p>NOTE:<p/>
              <p>
                  The “password” grant could be something to add to the module in the future, as it is also mostly used for first party clients.
              </p>

              <h3 id="subtitle4">Why not just use keys?</h3>
              <p>
                  API keys are very simple to use, and can be sufficient in many cases, but  using API keys has its limitations.
              </p>
              <ul>
                  <li>
                      <p>
                          API keys provide access to all or nothing. While JSON Web 	tokens allow for specifying a scope of authority
                      </p>
                  </li>
                  <li>
                      <p>
                          API keys usually don’t expire, but JSON Web tokens can be told 	to expire.
                      </p>
                  </li>
                  <li>
                      <p>
                          API keys are just strings and cannot be inspected.
                      </p>
                  </li>
                  <li>
                      <p>
                          Keeping API keys hidden adds further implementation
                      </p>
                  </li>
              </ul>
              <p>
                  In the end, it all comes down to what type of API you are developing. JSON Web Tokens are not flawless, their security relies on the implementation of their signature library. In the final analysis, all just comes down to what requirements you set for your API. If you don’t need the fancy feature additions, just keep it simple.
              </p>

              <h3 id="subtitle5">Design</h3>
              <p id="subtitle5-1">
                  Our module should add a middleware to the server handling token-issuing as well as token-validation for all requests, the server developer should also be able to decide which route should be accessible depending of the request-token’s  scope of authority.
              </p>
              <br/><img src="/static/img/Diagram.png"/>
              <br/><br/>
              <p id="subtitle5-2">
                  As shown in the picture above, the client sends a request and our module intercepts it, validates it and, on success, either returns a token signed by the server or sends the request to the server depending on whether the request is requesting a token or server resource. The server can then handle a request without having to worry about the authentication process.
              </p>
            </section>
            <section>
                <h2 id="title2">Report</h2>
                <p>
                    As I am fairly new to both Swift (the programming language this project is written) and Kitura (the key framework dependency for this project), I think it's worth mentioning what I learned exploring their features.
                </p>
                <h3 id="report-1">Exploring Swift</h3>
                <p>
                    So what is so different about Swift. Although Swift provides object oriented features as well as functional features, probably the most noteworthy to mention would be its way of implementing protocol orientation. Unlike many other programming languages that claim to provide a protocol oriented interface, Swift uses protocols both to communicate between unrelated classes and to template classes that share features. The latter ideology resulting in a collection of building blocks that make Swift's generic type feature. This means that we can limit state (and therefor minify unit tests) by creating type templates allowing the compiler to catch many of (maybe) otherwise hard to find bugs, as errors.
                </p>
                <p>
                    Further reading on Apple's book on Swift showed more awesome features such as (my favourite) the language's way to represent enumeration. In Swift enums aren't the same as enums in most languages. In most other languages enumerations are simply used to represent a single state as a switchable variable, while in Swift they are taken to a whole new level and include the possibility to represent an entire state machine by offering the possibility of a recursive constructor and the possibility of containing storing values. This helps us to decrease the lines of code in our app and is yet another cool Swifty way to limit states.
                </p>
                <p>
                    Another important feature in Swift is that strings are unicode-compliant. This means that you can create strings with both multi-character elements as well as simple characters when composing a string as opposed to representing a string simply as a character sequence. It means that you don't have to implement or include some module to deal with these elements. It also means that you can use multi-character elements such as Chinese letters or even emojis seamlessly in your strings and without braking them into characters.
                </p>
                <h3 id="report-2">Exploring Kitura</h3>
                <p>
                    Kitura exploits Swift's features well and creates a good interface for creating web services. When I started working with the framework's API I almost felt as if I knew everything already. I then came to understand that it is highly based on the express.js framework in which I already had a decent amount of experience and was in fact aiming to look like the javascript framework. There isn’t really much more to say about Kitura because of its youth, it just recently came out of Beta and is still shy of a few features express.js provides.
                </p>
                <p>
                    But even though Kitura is young it still has a big advantage over express.js, it is written in the very fast strictly typed language we love, Swift. Using it I will be able to exploit the language’s features to simplify our code and limit state which is ideal for security modules such as the one I am implementing.
                </p>
                <h3 id="report-3">Problems encountered</h3>
                <p>
                    Although developing the service itself was a fairly trivial task I had to scrap some very desirable features in the initial release due to a couple of third party problems
                </p>
                <ul>
                    <li>
                        <p>
                            Kitura's youth
                        </p>
                    </li>
                    <li>
                        <p>
                            The Swift 2.3 to Swift 3.0 update
                        </p>
                    </li>
                </ul>
                <p id="report-3-1">
                    Kitura started to show its youth right from the start. In the beginning of this project all we had was the initial beta (v.0.1), it was a very buggy release that had very few helper packages to speed up development. I wouldn't call this  problem a major one as I had enough design issues to address, but it did make the project throughout quite tedious and boring (All design and no play make me a dull boy).
                </p>
                <p id="report-3-2">
                    The Swift major update was a much bigger problem. Many many things changed between the versions and I knew things were going to break. And what do you know, an important dependency in our project disallowed older versions than the one supporting the new Swift 3 forcing us to move the whole project to the new updated SDK. This broke many dependencies and I was forced to write my own hacky version of many dependency features as I did not know when/if they would be updated to support Swift 3.
                </p>
                <p>
                    Eventually the dependencies were updated to use Swift 3 but the time it took was far too long and I had to scrap some of the more important features in the first release such as having the module containing a predefined admin scope which has access to all routes and is able to create credentials.
                </p>

                <h3 id="report-4">The Lesson</h3>
                <p>
                    Beware of early API versions in deadline projects, even if the framework or platform you are interested in is the next big thing in technology, when you have a deadline for your project it might not be the right move. In the end you want to have a nice project to show your instructor/boss.
                </p>
                <p>
                    Despite the negatives, the project went well as far as education is concerned. I learned a lot about Swift and Kitura, have grown confident in their APIs and gotten familiar with setting up Kitura based web applications like this one (hosted on Bluemix).
                </p>

                <h3 id="report-5">What's next?</h3>
                <p>
                    As stated in the previous section some features had to be scrapped out due to lack of time. But that was just for the initial release and  we will of course still be implementing those features.
                </p>
                <ul>
                    <li>
                        <p>
                            Admin as a fixed credential with authority to add credentials
                        </p>
                    </li>
                    <li>
                        <p>
                            password grant support
                        </p>
                    </li>
                    <li>
                        <p>
                            Package available in the Swift Package Catalogue
                        </p>
                    </li>
                </ul>
            </section>
            <section>
              <h2 id="about_me">About Me</h2>
              <p>
                  My name is Thorvaldur Runarsson, I'm a computer science major at the University of Iceland. I have been practicing mobile and web development since 2012 and I've developed/worked on projects such as <a href="https://www.airserver.com">AirServer</a> & <a href="https://www.airmediacenter.com"> Air Media Center</a> and am currently working on a gaming platform called GameSmash.
              </p>

            </section>

          </article>
          <!-- END Main content -->
        </div>
      </main>


      <!-- Footer -->
      <footer class="site-footer">
        <div class="container">
          <a id="scroll-up" href="#"><i class="fa fa-angle-up"></i></a>

          <div class="row">
            <div class="col-md-6 col-sm-6">
              <p>Copyright &copy; 2016. Thorvaldur Runarsson All right reserved</p>
            </div>
            <div class="col-md-6 col-sm-6">
              <ul class="footer-menu">
                <li><a href="#">^</a></li>
                <li><a href="mailto:valdirunars@gmail.com">Contact us</a></li>
              </ul>
            </div>
          </div>
        </div>
      </footer>
      <!-- END Footer -->

      <!-- Scripts -->
      <script src="/static/scripts/theDocs.all.min.js"></script>
      <script src="/static/scripts/theDocs.js"></script>
      <script src="/static/scripts/custom.js"></script>

    </body>
</html>
